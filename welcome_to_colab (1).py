# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

!pip install QuantLib-Python
from QuantLib import *

today = Date(7, March, 2021)
Settings.instance().evaluationDate = today

option = EuropeanOption(PlainVanillaPayoff(Option.Call, 100.0),
                        EuropeanExercise(Date(10, March, 2021)))

u = SimpleQuote(100.0)
r = SimpleQuote(0.01)
sigma = SimpleQuote(0.20)

riskFreeCurve = FlatForward(0, TARGET(), QuoteHandle(r), Actual360())
volatility = BlackConstantVol(0, TARGET(), QuoteHandle(sigma), Actual360())

process = BlackScholesProcess(QuoteHandle(u),
                              YieldTermStructureHandle(riskFreeCurve),
                              BlackVolTermStructureHandle(volatility))

engine = AnalyticEuropeanEngine(process)
option.setPricingEngine(engine)

print(option.NPV())

print(option.delta())
print(option.gamma())
print(option.vega())

u.setValue(105.0)
print(option.NPV())

import numpy as np
from IPython.display import display
import matplotlib.pyplot as plt
import utils

import numpy as np
from IPython.display import display
import matplotlib.pyplot as plt

# Assuming 'utils' contains functions for plotting, it's likely you intended to use matplotlib's plotting capabilities directly
# If 'utils' is a custom module and 'plot' is intended to be a function within it, ensure that it's defined in the module.
# Replace the call to 'utils.plot()' with the following:

fig, ax = plt.subplots()  # Create a figure and axes using matplotlib

# define xs and ys here so they can be used in the plotting code
xs = np.linspace(80.0, 120.0, 400)
ys = []
# ... (rest of your code) ...

for x in xs:
    u.setValue(x)
    ys.append(option.NPV())

# Move plotting outside the loop to plot after all data points are collected
ax.set_title('Option value')
# utils.highlight_x_axis(ax)  # If 'highlight_x_axis' exists in 'utils', you can keep this line, otherwise, consider removing it or implementing it using matplotlib functionality
ax.plot(xs, ys)  # Use matplotlib's plot function

plt.show()  # Display the plot

u.setValue(105.0)
r.setValue(0.01)
sigma.setValue(0.20)

print(option.NPV())

r.setValue(0.03)

print(option.NPV())

sigma.setValue(0.25)

print(option.NPV())

